name: CI → Build → Push (Docker Hub) → Deploy (Helm)

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch: {}

env:
  IMAGE_NAME: kube-yaml-service
  IMAGE_REPO: docker.io/mpw07458/kube-yaml-service
  DOCKER_BUILDKIT: 1
  RELEASE_NAME: prod
  NAMESPACE: apps
  CHART_PATH: charts/kube-yaml-service

jobs:
  qodana:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Pre-build bytecode (skip tests)
        run: ./gradlew --no-daemon clean assemble -x test

      - name: Qodana Scan
        id: qodana
        uses: JetBrains/qodana-action@v2025.2
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
        with:
          results-dir: .qodana
          pr-mode: ${{ github.event_name == 'pull_request' }}
          use-caches: true
          post-pr-comment: true
          use-annotations: true
          upload-result: true

      - name: List Qodana results
        run: ls -la .qodana || true

      - name: Upload SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .qodana/qodana.sarif.json

  build-and-push:
    needs: qodana
    if: needs.qodana.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      image_tag: ${{ steps.tag.outputs.tag }}
      image_repo: ${{ env.IMAGE_REPO }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate Docker Hub creds
        run: |
          test -n "${{ secrets.DOCKERHUB_USERNAME }}" || (echo "Missing DOCKERHUB_USERNAME"; exit 1)
          test -n "${{ secrets.DOCKERHUB_TOKEN }}"    || (echo "Missing DOCKERHUB_TOKEN"; exit 1)

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Build JAR
        run: ./gradlew --no-daemon clean build -x test

      - name: Compute image tag (sha-short)
        id: tag
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "tag=sha-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "Using tag: sha-${SHORT_SHA}"

      - name: Docker meta (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_REPO }}
          tags: |
            type=raw,value=${{ steps.tag.outputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=tag

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (amd64)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy (Helm) to EKS & AKS
    # Deploy only on main pushes or manual runs; skip for PRs
    if: |
      needs.build-and-push.result == 'success' &&
      needs.build-and-push.outputs.image_tag != '' &&
      (github.event_name != 'pull_request')
    needs: build-and-push
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ "eks", "aks" ]
    permissions:
      contents: read
      id-token: write   # for AWS/GCP/Azure federated auth
    env:
      IMAGE_REPO: ${{ needs.build-and-push.outputs.image_repo }}
      IMAGE_TAG:  ${{ needs.build-and-push.outputs.image_tag }}
      CHART_PATH: ${{ env.CHART_PATH }}
      RELEASE_NAME: ${{ env.RELEASE_NAME }}
      NAMESPACE: ${{ env.NAMESPACE }}
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Install helm
        uses: azure/setup-helm@v4

      # ---------- EKS context ----------
      - name: Configure AWS creds (EKS)
        if: matrix.target == 'eks'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}   # OR use access keys below
          aws-region: ${{ secrets.AWS_REGION }}
          # If not assuming a role, use:
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set kubectl context (EKS)
        if: matrix.target == 'eks'
        shell: bash
        run: |
          test -n "${{ secrets.EKS_CLUSTER_NAME }}" || (echo "Missing EKS_CLUSTER_NAME secret"; exit 1)
          test -n "${{ secrets.AWS_REGION }}" || (echo "Missing AWS_REGION secret"; exit 1)
          aws eks update-kubeconfig --name "${{ secrets.EKS_CLUSTER_NAME }}" --region "${{ secrets.AWS_REGION }}"
          kubectl version --client
          kubectl cluster-info

      # ---------- AKS context ----------
      - name: Azure login
        if: matrix.target == 'aks'
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # JSON: { "clientId": "...", "clientSecret": "...", "subscriptionId": "...", "tenantId": "..." }

      - name: Set kubectl context (AKS)
        if: matrix.target == 'aks'
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name:   ${{ secrets.AKS_CLUSTER_NAME }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # ---------- Common deploy steps ----------
      - name: Ensure namespace
        run: kubectl get ns "$NAMESPACE" || kubectl create ns "$NAMESPACE"

      - name: Helm upgrade/install
        run: |
          helm upgrade --install "$RELEASE_NAME" "$CHART_PATH" \
            --namespace "$NAMESPACE" \
            --set image.repository="$IMAGE_REPO" \
            --set image.tag="$IMAGE_TAG" \
            --history-max 5

      - name: Wait for rollout
        run: |
          # Assumes your chart names Deployment: {{ .Release.Name }}-kube-yaml-service
          kubectl -n "$NAMESPACE" rollout status deploy/${RELEASE_NAME}-kube-yaml-service --timeout=180s
          kubectl -n "$NAMESPACE" get pods,svc
