name: Build → Push Docker Hub → Deploy (Helm)

on:
  workflow_run:
    workflows: ["Qodana"]   # must match the name: in your qodana workflow
    types: [completed]

env:
  IMAGE_NAME: kube-yaml-service
  DOCKER_BUILDKIT: 1
  RELEASE_NAME: prod
  NAMESPACE: apps
  CHART_PATH: charts/kube-yaml-service
  IMAGE_REPO: docker.io/mpw07458/kube-yaml-service

jobs:
  build-and-push:
    # Gate on: Qodana success + originated from push to main
    if: >
      ${{
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.event == 'push' &&
        github.event.workflow_run.head_branch == 'main'
      }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    outputs:
      image_tag: ${{ steps.tag.outputs.tag }}

    steps:
      - name: Checkout (same commit Qodana scanned)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Validate Docker Hub creds
        run: |
          test -n "${{ secrets.DOCKERHUB_USERNAME }}" || (echo "Missing DOCKERHUB_USERNAME"; exit 1)
          test -n "${{ secrets.DOCKERHUB_TOKEN }}"    || (echo "Missing DOCKERHUB_TOKEN"; exit 1)

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Build JAR
        run: ./gradlew --no-daemon clean build -x test

      - name: Compute image tag (sha-short) — must match docker/metadata-action
        id: tag
        env:
          SHA: ${{ github.event.workflow_run.head_sha }}
        run: |
          SHORT_SHA="${SHA::7}"
          echo "tag=sha-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "Using image tag: sha-${SHORT_SHA}"

      - name: Docker meta (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.tag.outputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=tag

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (amd64)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    # only run if the build job actually ran (same gates) and produced a tag
    if: ${{ needs.build-and-push.result == 'success' && needs.build-and-push.outputs.image_tag != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Validate kubeconfig secret
        run: |
          test -n "${{ secrets.KUBE_CONFIG }}" || (echo "Missing KUBE_CONFIG"; exit 1)

      - name: Install kubectl + helm
        uses: azure/setup-kubectl@v4
      - uses: azure/setup-helm@v4

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          kubectl config get-contexts

      - name: Ensure namespace
        run: kubectl get ns $NAMESPACE || kubectl create ns $NAMESPACE

      - name: Helm upgrade/install
        run: |
          helm upgrade --install $RELEASE_NAME $CHART_PATH \
            --namespace $NAMESPACE \
            --set image.repository=$IMAGE_REPO \
            --set image.tag='${{ needs.build-and-push.outputs.image_tag }}' \
            --history-max 5

      - name: Wait for rollout
        run: |
          kubectl -n $NAMESPACE rollout status deploy/${RELEASE_NAME}-kube-yaml-service --timeout=180s
          kubectl -n $NAMESPACE get pods,svc
